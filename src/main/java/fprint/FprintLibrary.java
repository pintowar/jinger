package fprint;

import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;

/**
 * JNA Wrapper for library <b>fprint</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class FprintLibrary implements Library {

    public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("fprint", true, FprintLibrary.class);
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);

    static {
        Native.register(JNA_LIBRARY_NAME);
    }

    public static interface fp_finger {
        /// thumb (left hand)

        public static final int LEFT_THUMB = 1;
        /// index finger (left hand)
        public static final int LEFT_INDEX = 2;
        /// middle finger (left hand)
        public static final int LEFT_MIDDLE = 3;
        /// ring finger (left hand)
        public static final int LEFT_RING = 4;
        /// little finger (left hand)
        public static final int LEFT_LITTLE = 5;
        /// thumb (right hand)
        public static final int RIGHT_THUMB = 6;
        /// index finger (right hand)
        public static final int RIGHT_INDEX = 7;
        /// middle finger (right hand)
        public static final int RIGHT_MIDDLE = 8;
        /// ring finger (right hand)
        public static final int RIGHT_RING = 9;
        /// little finger (right hand)
        public static final int RIGHT_LITTLE = 10;
    };

    public static interface fp_enroll_result {

        /**
         * Enrollment completed successfully, the enrollment data has been<br>
         * returned to the caller.
         */
        public static final int FP_ENROLL_COMPLETE = 1;
        /**
         * Enrollment failed due to incomprehensible data; this may occur when<br>
         * the user scans a different finger on each enroll stage.
         */
        public static final int FP_ENROLL_FAIL = 2;
        /// Enroll stage passed; more stages are need to complete the process.
        public static final int FP_ENROLL_PASS = 3;
        /**
         * The enrollment scan did not succeed due to poor scan quality or<br>
         * other general user scanning problem.
         */
        public static final int FP_ENROLL_RETRY = 100;
        /**
         * The enrollment scan did not succeed because the finger swipe was<br>
         * too short.
         */
        public static final int FP_ENROLL_RETRY_TOO_SHORT = 101;
        /**
         * The enrollment scan did not succeed because the finger was not<br>
         * centered on the scanner.
         */
        public static final int FP_ENROLL_RETRY_CENTER_FINGER = 102;
        /**
         * The verification scan did not succeed due to quality or pressure<br>
         * problems; the user should remove their finger from the scanner before<br>
         * retrying.
         */
        public static final int FP_ENROLL_RETRY_REMOVE_FINGER = 103;
    };

    public static interface fp_verify_result {

        /**
         * The scan completed successfully, but the newly scanned fingerprint<br>
         * does not match the fingerprint being verified against.<br>
         * In the case of identification, this return code indicates that the<br>
         * scanned finger could not be found in the print gallery.
         */
        public static final int FP_VERIFY_NO_MATCH = 0;
        /**
         * The scan completed successfully and the newly scanned fingerprint does<br>
         * match the fingerprint being verified, or in the case of identification,<br>
         * the scanned fingerprint was found in the print gallery.
         */
        public static final int FP_VERIFY_MATCH = 1;
        /**
         * The scan did not succeed due to poor scan quality or other general<br>
         * user scanning problem.
         */
        public static final int FP_VERIFY_RETRY = FprintLibrary.fp_enroll_result.FP_ENROLL_RETRY;
        /// The scan did not succeed because the finger swipe was too short.
        public static final int FP_VERIFY_RETRY_TOO_SHORT = FprintLibrary.fp_enroll_result.FP_ENROLL_RETRY_TOO_SHORT;
        /**
         * The scan did not succeed because the finger was not centered on the<br>
         * scanner.
         */
        public static final int FP_VERIFY_RETRY_CENTER_FINGER = FprintLibrary.fp_enroll_result.FP_ENROLL_RETRY_CENTER_FINGER;
        /**
         * The scan did not succeed due to quality or pressure problems; the user<br>
         * should remove their finger from the scanner before retrying.
         */
        public static final int FP_VERIFY_RETRY_REMOVE_FINGER = FprintLibrary.fp_enroll_result.FP_ENROLL_RETRY_REMOVE_FINGER;
    };

    public static native Pointer fp_driver_get_name(FprintLibrary.fp_driver drv);

    public static native Pointer fp_driver_get_full_name(FprintLibrary.fp_driver drv);

    public static native short fp_driver_get_driver_id(FprintLibrary.fp_driver drv);

    public static native PointerByReference fp_discover_devs();

    @Deprecated
    public static native void fp_dscv_devs_free(PointerByReference devs);

    //public static native void fp_dscv_devs_free(FprintLibrary.fp_dscv_dev devs[]);

    public static native FprintLibrary.fp_driver fp_dscv_dev_get_driver(FprintLibrary.fp_dscv_dev dev);

    public static native int fp_dscv_dev_get_devtype(FprintLibrary.fp_dscv_dev dev);

    public static native int fp_dscv_dev_supports_print_data(FprintLibrary.fp_dscv_dev dev, FprintLibrary.fp_print_data print);

    public static native int fp_dscv_dev_supports_dscv_print(FprintLibrary.fp_dscv_dev dev, FprintLibrary.fp_dscv_print print);

    @Deprecated
    public static native FprintLibrary.fp_dscv_dev fp_dscv_dev_for_print_data(PointerByReference devs, FprintLibrary.fp_print_data print);

    //public static native FprintLibrary.fp_dscv_dev fp_dscv_dev_for_print_data(FprintLibrary.fp_dscv_dev devs[], FprintLibrary.fp_print_data print);

    @Deprecated
    public static native FprintLibrary.fp_dscv_dev fp_dscv_dev_for_dscv_print(PointerByReference devs, FprintLibrary.fp_dscv_print print);

    //public static native FprintLibrary.fp_dscv_dev fp_dscv_dev_for_dscv_print(FprintLibrary.fp_dscv_dev devs[], FprintLibrary.fp_dscv_print print);

    //public static native FprintLibrary.fp_dscv_print[] fp_discover_prints();

    @Deprecated
    public static native void fp_dscv_prints_free(PointerByReference prints);

    //public static native void fp_dscv_prints_free(FprintLibrary.fp_dscv_print prints[]);

    public static native short fp_dscv_print_get_driver_id(FprintLibrary.fp_dscv_print print);

    public static native int fp_dscv_print_get_devtype(FprintLibrary.fp_dscv_print print);

    public static native /**
             * @see fp_finger
             */
            int fp_dscv_print_get_finger(FprintLibrary.fp_dscv_print print);

    public static native int fp_dscv_print_delete(FprintLibrary.fp_dscv_print print);

    public static native FprintLibrary.fp_dev fp_dev_open(FprintLibrary.fp_dscv_dev ddev);

    public static native void fp_dev_close(FprintLibrary.fp_dev dev);

    public static native FprintLibrary.fp_driver fp_dev_get_driver(FprintLibrary.fp_dev dev);

    public static native int fp_dev_get_nr_enroll_stages(FprintLibrary.fp_dev dev);

    public static native int fp_dev_get_devtype(FprintLibrary.fp_dev dev);

    public static native int fp_dev_supports_print_data(FprintLibrary.fp_dev dev, FprintLibrary.fp_print_data data);

    public static native int fp_dev_supports_dscv_print(FprintLibrary.fp_dev dev, FprintLibrary.fp_dscv_print print);

    public static native int fp_dev_supports_imaging(FprintLibrary.fp_dev dev);

    public static native int fp_dev_img_capture(FprintLibrary.fp_dev dev, int unconditional, PointerByReference image);

    //public static native int fp_dev_img_capture(FprintLibrary.fp_dev dev, int unconditional, FprintLibrary.fp_img image[]);

    public static native int fp_dev_get_img_width(FprintLibrary.fp_dev dev);

    public static native int fp_dev_get_img_height(FprintLibrary.fp_dev dev);

    @Deprecated
    public static native int fp_enroll_finger_img(FprintLibrary.fp_dev dev, PointerByReference print_data, PointerByReference img);

    //public static native int fp_enroll_finger_img(FprintLibrary.fp_dev dev, FprintLibrary.fp_print_data print_data[], FprintLibrary.fp_img img[]);

    @Deprecated
    public static native int fp_verify_finger_img(FprintLibrary.fp_dev dev, FprintLibrary.fp_print_data enrolled_print, PointerByReference img);

    //public static native int fp_verify_finger_img(FprintLibrary.fp_dev dev, FprintLibrary.fp_print_data enrolled_print, FprintLibrary.fp_img img[]);

    public static native int fp_dev_supports_identification(FprintLibrary.fp_dev dev);

    @Deprecated
    public static native int fp_identify_finger_img(FprintLibrary.fp_dev dev, PointerByReference print_gallery, NativeSizeByReference match_offset, PointerByReference img);

    //public static native int fp_identify_finger_img(FprintLibrary.fp_dev dev, FprintLibrary.fp_print_data print_gallery[], NativeSizeByReference match_offset, FprintLibrary.fp_img img[]);

    @Deprecated
    public static native int fp_print_data_load(FprintLibrary.fp_dev dev, int finger, PointerByReference data);

    //public static native int fp_print_data_load(FprintLibrary.fp_dev dev, int finger, FprintLibrary.fp_print_data data[]);

    @Deprecated
    public static native int fp_print_data_from_dscv_print(FprintLibrary.fp_dscv_print print, PointerByReference data);

    //public static native int fp_print_data_from_dscv_print(FprintLibrary.fp_dscv_print print, FprintLibrary.fp_print_data data[]);

    public static native int fp_print_data_save(FprintLibrary.fp_print_data data, int finger);

    public static native int fp_print_data_delete(FprintLibrary.fp_dev dev, int finger);

    public static native void fp_print_data_free(FprintLibrary.fp_print_data data);

    public static native NativeSize fp_print_data_get_data(FprintLibrary.fp_print_data data, PointerByReference ret);

    @Deprecated
    public static native FprintLibrary.fp_print_data fp_print_data_from_data(Pointer buf, NativeSize buflen);

    public static native FprintLibrary.fp_print_data fp_print_data_from_data(ByteBuffer buf, NativeSize buflen);

    public static native short fp_print_data_get_driver_id(FprintLibrary.fp_print_data data);

    public static native int fp_print_data_get_devtype(FprintLibrary.fp_print_data data);

    public static native int fp_img_get_height(FprintLibrary.fp_img img);

    public static native int fp_img_get_width(FprintLibrary.fp_img img);

    public static native Pointer fp_img_get_data(FprintLibrary.fp_img img);

    @Deprecated
    public static native int fp_img_save_to_file(FprintLibrary.fp_img img, Pointer path);

    public static native int fp_img_save_to_file(FprintLibrary.fp_img img, ByteBuffer path);

    public static native void fp_img_standardize(FprintLibrary.fp_img img);

    public static native FprintLibrary.fp_img fp_img_binarize(FprintLibrary.fp_img img);

    //@Deprecated
    //public static native ByReference[] fp_img_get_minutiae(FprintLibrary.fp_img img, IntByReference nr_minutiae);

    //public static native ByReference[] fp_img_get_minutiae(FprintLibrary.fp_img img, IntBuffer nr_minutiae);

    public static native void fp_img_free(FprintLibrary.fp_img img);

    public static native int fp_init();

    public static native void fp_exit();
    /// Pointer to unknown (opaque) type

    public static class fp_driver extends PointerType {

        public fp_driver(Pointer address) {
            super(address);
        }

        public fp_driver() {
            super();
        }
    };
    /// Pointer to unknown (opaque) type

    public static class fp_print_data extends PointerType {

        public fp_print_data(Pointer address) {
            super(address);
        }

        public fp_print_data() {
            super();
        }
    };
    /// Pointer to unknown (opaque) type

    public static class fp_img extends PointerType {

        public fp_img(Pointer address) {
            super(address);
        }

        public fp_img() {
            super();
        }
    };
    /// Pointer to unknown (opaque) type

    public static class fp_dev extends PointerType {

        public fp_dev(Pointer address) {
            super(address);
        }

        public fp_dev() {
            super();
        }
    };
    /// Pointer to unknown (opaque) type

    public static class fp_dscv_dev extends PointerType {

        public fp_dscv_dev(Pointer address) {
            super(address);
        }

        public fp_dscv_dev() {
            super();
        }
    };
    /// Pointer to unknown (opaque) type

    public static class fp_dscv_print extends PointerType {

        public fp_dscv_print(Pointer address) {
            super(address);
        }

        public fp_dscv_print() {
            super();
        }
    };
}
